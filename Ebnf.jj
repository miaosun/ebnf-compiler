//http://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form


PARSER_BEGIN(Ebnf)
// código Java que invoca o parser
public class Ebnf {
	public static void main(String args[]) throws ParseException {
		// criação do objecto utilizando o constructor com argumento para
		// ler do standard input (teclado)
		Ebnf parser = new Ebnf(System.in);
		parser.Test();
	}
}
PARSER_END(Ebnf)
// símbolos que não devem ser considerados na análise
SKIP :
{
	" " | "\t" | "\r" | "\n"
}
// definição dos tokens (símbolos terminais)
TOKEN :
{
	< LETTER : ["A"-"Z"] | ["a"-"z"] >
	|
	< COMMA : "," >
	|
	< DIGIT : ["0" - "9"] >
	|							//SYMBOLS
	< LPAREN : "(" >
	|
	< RPAREN : ")" >
	|
	< LBRACKET : "[" >
	|
	< RBRACKET : "]" >
	|
	< LBRACE: "{" >
	|
	< RBRACE : "}" >
	|
	< DOT : "." >
	|
	< OR : "|" >
	|
	< SEMICOLON : ";" >
	|
	< EQUALS : "=" >
	|
	< Q_MARK : "\"" >
	|
	< S_QUOTE : "\'" >
	|
	< LESS_THAN : "<" >
	|
	< GREATER_THAN : ">" >
	|
	< SYMBOL : <LPAREN> | <LBRACKET> | <LBRACE> | <RPAREN> | <RBRACKET> | <RBRACE> | <GREATER_THAN> | <LESS_THAN> | <S_QUOTE> | <Q_MARK> | <EQUALS> | <OR> | <DOT> | <COMMA> | <SEMICOLON> >
	|
	< CARACTER : <LETTER> | <DIGIT> | <SYMBOL> | "_" >
	|
	< IDENTIFIER : (<LETTER> (<LETTER> | <DIGIT> | "_")* )+ >
	| 
	< TERMINAL : (<S_QUOTE> <CARACTER> (<CARACTER>)* <S_QUOTE>) | (<Q_MARK> <CARACTER> (<CARACTER>)* <Q_MARK>) >
	|
	//< START_COMMENT : <OPEN1> "*" >
	//< END_COMMENT : "*" <CLOSE1> >
	< COMMENT : "(*" (~["*"])* "*" ("*" | ~["*",")"] (~["*"])* "*")* ")" >
	|
	//< ALL : ~[] > //?
	//|
	< SPECIAL_SEQUENCE : "?" (~["?"])* "?" >

	//< LHS : <IDENTIFIER> >
}
	
//definição da produção

void Rhs() : {}
{
	//Rhs1() | (Rhs1() <OR> Rhs()) | (Rhs1() <CM> Rhs())
	Rhs1() ( (<OR> | <COMMA>) Rhs())?
}

void Rhs1() : {}
{
	<IDENTIFIER>
	| <TERMINAL>
	| (<LPAREN> Rhs() <RPAREN>)
	| (<LBRACKET> Rhs() <RBRACKET>)
	| (<LBRACE> Rhs() <RBRACE>)
}

void Rule() : {}
{
	<IDENTIFIER> <EQUALS> Rhs() <SEMICOLON>
}

/*
void SpecialSequence() : {}
{
	"?" (~["?"])* "?"
}
*/

void Test() : {/*Token t1, t2, t3;*/}
{
	(Rule() | <COMMENT> | <SPECIAL_SEQUENCE>)+
}