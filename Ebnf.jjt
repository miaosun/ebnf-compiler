//http://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form


PARSER_BEGIN(Ebnf)
// CÃ³digo Java que invoca o parser
import java.util.HashMap;
import java.lang.String;
import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.Writer;
import java.io.OutputStreamWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.regex.*;


public class Ebnf {

	public static Pattern patternQuotes;
	public static Pattern patternQuotationMarks; 
	public static Matcher matcher;

	public static void main(String args[]) throws ParseException {

		// Iniciando parser
		Ebnf parser;
		Writer writer = null;
		Writer dottyWriter = null;
		patternQuotes = Pattern.compile("^\'(.*?)\'$");
		patternQuotationMarks = Pattern.compile("^\"(.*?)\"$");

		// Ler de do STD
		if(args.length == 0){
		System.out.println ("\nParser: Reading input ...");
		parser = new Ebnf(System.in);
		}
		// Ler de um ficheiro
		else if(args.length == 1){
			System.out.println ("\nParser: Reading the file " + args[0] + " ..." );
			try {
				parser = new Ebnf(new java.io.FileInputStream(args[0]));
			}
			catch(java.io.FileNotFoundException e) {
				System.out.println ("\nParser: The file " + args[0] + " was not found.");
				return;
			}
		}
		else {
			System.out.println ("Parser:  You must use one of the following:");
			System.out.println ("         java Parser < file");
			System.out.println ("Or");
			System.out.println ("         java Parser file");
			return ;
		}
		try {
			String name = ""+args[0];
			namedot = name.replace(".txt",".dot");
			name = name.replace(".txt",".jj");
			
			writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("JavaCC"+name), "utf-8"));
			dottyWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("Dotty"+namedot), "utf-8"));
			SimpleNode root = parser.Start();
			root.dump("",writer,parser.getClass().getName());
			root.generateDotty(dottyWriter);
			//SimpleNode.dumpIds();
			//SimpleNode.dumpTokens();
			if(!root.verifyIdentifiers())
			{
				System.out.println("\nABORT!");
				System.exit(1);
			}
			System.out.println ("\nParser: The input was readed sucessfully.");

		}
		catch(ParseException e){
			System.out.println ("\nParser: There was an error during the parse.");
			System.out.println (e.getMessage());
		}
		catch(IOException e){
			System.out.println("\nIO Error: Wasn't able to create/write to the file.");
			System.out.println(e.getMessage());
		}
		catch(TokenMgrError e){
			System.out.println ("\nParser: There was an error.");
			System.out.println (e.getMessage());
		}
		finally{
			try {writer.close();} catch (Exception e) {}
		}

	}
	// Guardar possiveis tokens [Identifier, (Terminal,Terminal,Terminal, ...)]
	/*
	HashMap<String, ArrayList<String>> TokenTable = new HashMap<String,ArrayList<String>>();

    void createTokenTable(SimpleNode node) {
         for(int i=0; i< node.jjtGetNumChildren(); i++) {
                 createTokenTable((SimpleNode) node.jjtGetChild(i));
         }
         if(node.id == EbnfTreeConstants.JJTASSIGNMENT) {
         	//find indentifier and add new String for token... FIXME
                   TokenTable.put(node.identifier, new String(node.val));
                   return;
                   }
        return;
  }
  */
}
PARSER_END(Ebnf)

// sÃ­mbolos que nÃ£o devem ser considerados na anÃ¡lise
SKIP :
{
	" " | "\t" | "\r" | "\n"
}
// definiÃ§Ã£o dos tokens (sÃ­mbolos terminais)
TOKEN :
{
	< LETTER : ["A"-"Z"] | ["a"-"z"] >
	|
	< DIGIT : ["0" - "9"] >
	|
	< COMMA : "," >
	|
	< EQUALS : "=" >
	|
	< OR : "|" >
	|
	< LPAREN : "(" >
	|
	< RPAREN : ")" >
	|
	< LBRACKET : "[" >
	|
	< RBRACKET : "]" >
	|
	< LBRACE : "{" >
	|
	< RBRACE : "}" >
	|
	< SEMICOLON : ";" >
	|
	< Q_MARK : "\"" >
	|
	< S_QUOTE : "\'" >
	|
	< EXCEPTION : "-" >
	|
	< ASTERIX : "*">
	|
	< SYMBOL : <COMMA> | <EQUALS> | <OR> | <LPAREN> | <RPAREN> | <LBRACKET> | <RBRACKET> | <LBRACE> | <RBRACE> | <SEMICOLON> | <Q_MARK> | <S_QUOTE> |
	 <EXCEPTION> | <ASTERIX> | /*" " |*/ "." | ":" | "!" | "+" | "_" | "%" | "@" | "&" | "#" | "$" | "<" | ">" | "/" | "\\" | "^" | "`" | "´" | "~">
	|
	< CARACTER : <LETTER> | <DIGIT> | <SYMBOL> >
	|
	< IDENTIFIER : <LETTER> (<LETTER> | <DIGIT> | " " | "_")* >
	|
	< TERMINAL : <S_QUOTE> <CARACTER> (<CARACTER>)* <S_QUOTE> | <Q_MARK> <CARACTER> (<CARACTER>)* <Q_MARK> >
	|
	< COMMENT : <LPAREN> "*" (~["*"])* "*" ("*" | ~["*","("] (~["*"])* "*")* <RPAREN>>
	|
	< SPECIAL_SEQUENCE : "?" (~["?"])* "?" >
	//< ALL : ~[] > //?
}
	
//definiÃ§Ã£o da produÃ§Ã£o
//TODO faltam alguma produÃ§Ãµes para criar a AST ele estÃ¡ a ir buscar mal o nomes da .image. TambÃ©m corrigir o problema de pensar que "A" | "B" Ã© um terminal 
/*
void SpecialSequence() : {}
{
	"?" (~["?"])* "?"
}
*/

void Lhs() #RuleName: {Token t;}
{
	(t=<IDENTIFIER>{jjtThis.value= ""+t.image.trim().replace(" ", "_"); 
	SimpleNode.addIdentifier(""+t.image);})+ // + necessario?
}

void Rhs() #Union(>1): {Token t;}
{
	Rhs2()  
	(
		(
			//Test()
			<OR> {jjtThis.value= "|";} 
		) 
	Rhs2()
	)* 
}

void Rhs2() #Concat(>1): {Token t;}
{
	Rhs3()  
	(
		(
			<COMMA> {jjtThis.value= ",";} 
		) 
	Rhs3() 
	)*
}

void Rhs3() #Except(>1): {Token t;}
{
	Rhs1()  
	(
		(
			<EXCEPTION> {jjtThis.value= ",";} 
		)  
	Rhs1() 
	)*
}

/*
* repetition-symbol
- except-symbol
, concatenate-symbol
| definition-separator-symbol
= defining-symbol
; terminator-symbol
*/

void Rhs1() #void: {Token t;}
{
	(t=<IDENTIFIER> { jjtThis.value= ""+t.image.trim().replace(" ", "_");}) #Identifier
	| 
	(t=<TERMINAL> 
		{
			jjtThis.value= ""+t.image.trim().replace(" ", "_");
			matcher = patternQuotes.matcher(""+t.image);
			if(matcher.matches())
			{
				if(!SimpleNode.containsToken(matcher.group(1)))
					SimpleNode.addToken(matcher.group(1));
			}
			else
			{
				matcher = patternQuotationMarks.matcher(""+t.image);
				if(matcher.matches())
				{
					if(!SimpleNode.containsToken(matcher.group(1)))
						SimpleNode.addToken(matcher.group(1));
				}
			}
		})+ #Terminal // + necessario?
	| 
	(t=<SPECIAL_SEQUENCE> { jjtThis.value= ""+t.image;}) #SpecialSeq
	|
	Precedence()
}

void Precedence() #void: {}  //mudamos precedence para void que nao e preciso
{
	(<LPAREN> Rhs() <RPAREN>) #Grouping
	| (<LBRACKET> Rhs() <RBRACKET>) #Option
	| (<LBRACE> Rhs() <RBRACE>) #Repetition
}
void Rule() #Rule: {Token t1;}
{
	/*t1=Lhs() 
	t2= <EQUALS> {System.out.println("Token : {<EQUALS : '='>}");}
	Rhs() 
	<SEMICOLON>
	*/
	Lhs() t1=<EQUALS> Rhs() <SEMICOLON>
}

SimpleNode Start() #Start: {/*Token t1, t2, t3;*/}
{
	(Rule() | <COMMENT> )+ {return jjtThis;}
}